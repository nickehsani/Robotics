import picamera
import picamera.array
import time
import cv2
import numpy as np
import smtplib
from email.mime.multipart import MIMEMultipart  
from email.mime.base import MIMEBase  
from email.mime.text import MIMEText  
from email.utils import formatdate  
from email import encoders 


camera = picamera.PiCamera()
camera.resolution = (640, 480)
camera.framerate = 60
camera.vflip = False
camera.hflip = True


rawframe = picamera.array.PiRGBArray(camera, size = (640,480))

def nothing(x):
    pass

def largest_area(contours):
    absolutemax = 0
    for contour in contours:
        maximum = cv2.contourArea(contour)
        if maximum > absolutemax:
            absolutemax = maximum
    return absolutemax
        
        
        
def send_an_email():  
    toaddr = 'cjvelasq@ucsd.edu'      # To id 
    me = 'chris.velasquez511@gmail.com'          # your id
    subject = "Security Footage"              # Subject
    print("part1")
                
    msg = MIMEMultipart()  
    msg['Subject'] = subject  
    msg['From'] = me  
    msg['To'] = toaddr  
    msg.preamble = "test "   
    #msg.attach(MIMEText(text))
    print("part2")
                
    part = MIMEBase('application', "octet-stream")  
    part.set_payload(open("RedDetection.jpg", "rb").read())  
    encoders.encode_base64(part)  
    part.add_header('Content-Disposition', 'attachment; filename="RedDetection.jpg"')   # File name and format name
    msg.attach(part)  
    print("part3")
    try:  
        s = smtplib.SMTP('smtp.gmail.com', 587)  # Protocol
        s.ehlo()  
        s.starttls()  
        s.ehlo()  
        s.login(user = 'chris.velasquez511@gmail.com', password = 'chris1135952840')  # User id & password
        #s.send_message(msg)  
        s.sendmail(me, toaddr, msg.as_string())  
        s.quit()  
        #except:  
        #   print ("Error: unable to send email")
        print("pleasework")
    except SMTPException as error:  
        print ("Error")                # Exception

time.sleep(1)

reddetected = 0
# Main Program

if __name__ == '__main__':
    try:

        # Video stream that will only display red objects
        for frame in camera.capture_continuous(rawframe, format = "bgr", use_video_port = True):

            rawframe.truncate(0)

            image = frame.array

            blurred_masked = cv2.GaussianBlur(image, (5,5), 0) 

            image_hsv = cv2.cvtColor(blurred_masked, cv2.COLOR_BGR2HSV)

            lower_red = np.array([0, 50, 50])
            upper_red = np.array([10, 255, 255])
            

            ourmask1 = cv2.inRange(image_hsv, lower_red, upper_red)

            lower_red = np.array([170,50,50])
            upper_red = np.array([180,255,255])
            mask1 = cv2.inRange(image_hsv, lower_red, upper_red)

            ourmask = ourmask1 + mask1
            image_masked = cv2.bitwise_and(image, image, mask = ourmask)

            _, contours, _ = cv2.findContours(ourmask, cv2.RETR_TREE, cv2.CHAIN_APPROX_NONE)

            cv2.drawContours(image, contours, -1, (0,255,0), 3)

            cv2.imshow("ourmask", ourmask)
            cv2.imshow("Masked image", image_masked)
            cv2.imshow("blurred image", blurred_masked)
            cv2.imshow("image", image)


            if len(contours) != 0:
                absolutemax = largest_area(contours)
                print(absolutemax)
                if absolutemax > 100000:
                    if reddetected == 0:
                        time.sleep(3)
                        camera.capture( 'RedDetection.jpg')
                        send_an_email()
                        print("its golden hour")
                        reddetected = 1
                else:
                    if absolutemax < 100000:
                        if reddetected == 1:
                            print("it ain't golden hour no more :(")
                            reddetected = 0
                            
                    
                

            cv2.waitKey(1)
            


    except KeyboardInterrupt:
        print("Program stopped by User")
        cv2.destroyAllWindows()
        camera.close()

